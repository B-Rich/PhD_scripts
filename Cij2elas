#!/usr/bin/env python

import os
import sys, math, random
from cStringIO import StringIO
import numpy as np
import numpy.linalg as la
from scipy import optimize

################################################################################################

def dirVec(theta, phi):
  return [ math.sin(theta)*math.cos(phi), math.sin(theta)*math.sin(phi), math.cos(theta) ]

def dirVec1(theta, phi, chi):
  return [ math.sin(theta)*math.cos(phi), math.sin(theta)*math.sin(phi), math.cos(theta) ]

def dirVec2(theta, phi, chi):
  return [ math.cos(theta)*math.cos(phi)*math.cos(chi) - math.sin(phi)*math.sin(chi),
	  math.cos(theta)*math.sin(phi)*math.cos(chi) + math.cos(phi)*math.sin(chi),
	  - math.sin(theta)*math.cos(chi) ]


# Functions to minimize/maximize
def minimize(func, dim):
  if dim == 2:
    r = ((0, np.pi), (0, np.pi))
    n = 25
  elif dim == 3:
    r = ((0, np.pi), (0, np.pi), (0, np.pi))
    n = 10

  # TODO -- try basin hopping or annealing
  return optimize.brute(func, r, Ns = n, full_output = True, finish = optimize.fmin)[0:2]

def maximize(func, dim):
  res = minimize(lambda x: -func(x), dim)
  return (res[0], -res[1])


class Elastic:
  """An elastic tensor, along with methods to access it"""

  def __init__(self, s):
    """Initialize the elastic tensor from a string"""

    if not s:
      raise ValueError("no matrix was provided")

    # Remove braces and pipes
    s = s.replace("|", " ").replace("(", " ").replace(")", " ")

    # Remove empty lines
    lines = [line for line in s.split('\n') if line.strip()]
    if len(lines) != 6:
      raise ValueError("should have six rows")

    # Convert to float
    try:
      mat = [map(float, line.split()) for line in lines]
    except:
      raise ValueError("not all entries are numbers")

    # Make it into a square matrix
    mat = np.array(mat)
    if mat.shape != (6,6):
      # Is it upper triangular?
      if map(len, mat) == [6,5,4,3,2,1]:
	mat = [ [0]*i + mat[i] for i in range(6) ]
        mat = np.array(mat)

      # Is it lower triangular?
      if map(len, mat) == [1,2,3,4,5,6]:
	mat = [ mat[i] + [0]*(5-i) for i in range(6) ]
        mat = np.array(mat)

    if mat.shape != (6,6):
      raise ValueError("should be a square matrix")

    # Check that is is symmetric, or make it symmetric
    if la.norm(np.tril(mat, -1)) == 0:
      mat = mat + np.triu(mat, 1).transpose()
    if la.norm(np.triu(mat, 1)) == 0:
      mat = mat + np.tril(mat, -1).transpose()
    if la.norm(mat - mat.transpose()) > 0:
      raise ValueError("should be symmetric, or triangular")

    # Store it
    self.CVoigt = mat

    # Put it in a more useful representation
    self.SVoigt = la.inv(self.CVoigt)
    VoigtMat = [[0, 5, 4], [5, 1, 3], [4, 3, 2]]
    def SVoigtCoeff(p,q): return 1. / ((1+p/3)*(1+q/3))

    self.Smat = [[[[ SVoigtCoeff(VoigtMat[i][j], VoigtMat[k][l]) * self.SVoigt[VoigtMat[i][j]][VoigtMat[k][l]]
                     for i in range(3) ] for j in range(3) ] for k in range(3) ] for l in range(3) ]
    return

  def isOrthorhombic(self):
    def iszero(x): return (abs(x) < 1.e-3)
    return (iszero(self.CVoigt[0][3]) and iszero(self.CVoigt[0][4]) and iszero(self.CVoigt[0][5])
	    and iszero(self.CVoigt[1][3]) and iszero(self.CVoigt[1][4]) and iszero(self.CVoigt[1][5])
	    and iszero(self.CVoigt[2][3]) and iszero(self.CVoigt[2][4]) and iszero(self.CVoigt[2][5])
	    and iszero(self.CVoigt[3][4]) and iszero(self.CVoigt[3][5]) and iszero(self.CVoigt[4][5]))

  def isCubic(self):
    def iszero(x): return (abs(x) < 1.e-3)
    return (iszero(self.CVoigt[0][3]) and iszero(self.CVoigt[0][4]) and iszero(self.CVoigt[0][5])
	    and iszero(self.CVoigt[1][3]) and iszero(self.CVoigt[1][4]) and iszero(self.CVoigt[1][5])
	    and iszero(self.CVoigt[2][3]) and iszero(self.CVoigt[2][4]) and iszero(self.CVoigt[2][5])
	    and iszero(self.CVoigt[3][4]) and iszero(self.CVoigt[3][5]) and iszero(self.CVoigt[4][5])
	    and iszero(self.CVoigt[0][0] - self.CVoigt[1][1]) and iszero(self.CVoigt[0][0] - self.CVoigt[2][2])
	    and iszero(self.CVoigt[0][0] - self.CVoigt[1][1]) and iszero(self.CVoigt[0][0] - self.CVoigt[2][2])
	    and iszero(self.CVoigt[3][3] - self.CVoigt[4][4]) and iszero(self.CVoigt[3][3] - self.CVoigt[5][5])
	    and iszero(self.CVoigt[0][1] - self.CVoigt[0][2]) and iszero(self.CVoigt[0][1] - self.CVoigt[1][2]))

  def Young(self, x):
    a = dirVec(x[0], x[1])
    r = sum([ a[i]*a[j]*a[k]*a[l] * self.Smat[i][j][k][l]
	      for i in range(3) for j in range(3) for k in range(3) for l in range(3) ])
    return 1/r

  def LC(self, x):
    a = dirVec(x[0], x[1])
    r = sum([ a[i]*a[j] * self.Smat[i][j][k][k]
	      for i in range(3) for j in range(3) for k in range(3) ])
    return r

  def shear(self, x):
    a = dirVec(x[0], x[1])
    b = dirVec2(x[0], x[1], x[2])
    r = sum([ a[i]*b[j]*a[k]*b[l] * self.Smat[i][j][k][l]
	      for i in range(3) for j in range(3) for k in range(3) for l in range(3) ])
    return 1/(4*r)

  def Poisson(self, x):
    a = dirVec(x[0], x[1])
    b = dirVec2(x[0], x[1], x[2])
    r1 = sum([ a[i]*a[j]*b[k]*b[l] * self.Smat[i][j][k][l]
	      for i in range(3) for j in range(3) for k in range(3) for l in range(3) ])
    r2 = sum([ a[i]*a[j]*a[k]*a[l] * self.Smat[i][j][k][l]
	      for i in range(3) for j in range(3) for k in range(3) for l in range(3) ])
    return -r1/r2

  def averages(self):
    A = (self.CVoigt[0][0] + self.CVoigt[1][1] + self.CVoigt[2][2]) / 3
    B = (self.CVoigt[1][2] + self.CVoigt[0][2] + self.CVoigt[0][1]) / 3
    C = (self.CVoigt[3][3] + self.CVoigt[4][4] + self.CVoigt[5][5]) / 3
    a = (self.SVoigt[0][0] + self.SVoigt[1][1] + self.SVoigt[2][2]) / 3
    b = (self.SVoigt[1][2] + self.SVoigt[0][2] + self.SVoigt[0][1]) / 3
    c = (self.SVoigt[3][3] + self.SVoigt[4][4] + self.SVoigt[5][5]) / 3

    KV = (A + 2*B) / 3
    GV = (A - B + 3*C) / 5

    KR = 1 / (3*a + 6*b)
    GR = 5 / (4*a - 4*b + 3*c)

    KH = (KV + KR) / 2
    GH = (GV + GR) / 2

    return [ [KV, 1/(1/(3*GV) + 1/(9*KV)), GV, (1 - 3*GV/(3*KV+GV))/2],
	     [KR, 1/(1/(3*GR) + 1/(9*KR)), GR, (1 - 3*GR/(3*KR+GR))/2],
	     [KH, 1/(1/(3*GH) + 1/(9*KH)), GH, (1 - 3*GH/(3*KH+GH))/2] ]

  def shear2D(self, x):
    def func1(z): return self.shear([x[0], x[1], z])
    r1 = optimize.brute(func1, ((0, np.pi),), Ns = 15, full_output = True, finish = optimize.fmin)[0:2]
    def func2(z): return -self.shear([x[0], x[1], z])
    r2 = optimize.brute(func2, ((0, np.pi),), Ns = 15, full_output = True, finish = optimize.fmin)[0:2]
    return (r1[1], -r2[1])

  def Poisson2D(self, x):
    # Optimize this to save some time
    def func1(z): return self.Poisson([x[0], x[1], z])
    r1 = optimize.brute(func1, ((0, np.pi),), Ns = 15, full_output = True, finish = optimize.fmin)[0:2]
    def func2(z): return -self.Poisson([x[0], x[1], z])
    r2 = optimize.brute(func2, ((0, np.pi),), Ns = 15, full_output = True, finish = optimize.fmin)[0:2]
    return (min(0,r1[1]), max(0,r1[1]), -r2[1])


class ElasticOrtho(Elastic):
  """An elastic tensor, for the specific case of an orthorhombic system"""

  def __init__(self, arg):
    """Initialize from a matrix, or from an Elastic object"""
    if isinstance(arg, basestring):
      Elastic.__init__(self, arg)
    elif isinstance(arg, Elastic):
      self.CVoigt = arg.CVoigt
      self.SVoigt = arg.SVoigt
      self.Smat = arg.Smat
    else:
      raise TypeError("ElasticOrtho constructor argument should be string or Elastic object")

  def Young(self, x):
    ct2 = math.cos(x[0])**2
    st2 = 1 - ct2
    cf2 = math.cos(x[1])**2
    sf2 = 1 - cf2
    s11 = self.Smat[0][0][0][0]
    s22 = self.Smat[1][1][1][1]
    s33 = self.Smat[2][2][2][2]
    s44 = 4 * self.Smat[1][2][1][2]
    s55 = 4 * self.Smat[0][2][0][2]
    s66 = 4 * self.Smat[0][1][0][1]
    s12 = self.Smat[0][0][1][1]
    s13 = self.Smat[0][0][2][2]
    s23 = self.Smat[1][1][2][2]
    return 1/(ct2**2*s33 + 2*cf2*ct2*s13*st2 + cf2*ct2*s55*st2 + 2*ct2*s23*sf2*st2 + ct2*s44*sf2*st2 + cf2**2*s11*st2**2 + 2*cf2*s12*sf2*st2**2 + cf2*s66*sf2*st2**2 + s22*sf2**2*st2**2)

  def LC(self, x):
    ct2 = math.cos(x[0])**2
    cf2 = math.cos(x[1])**2
    s11 = self.Smat[0][0][0][0]
    s22 = self.Smat[1][1][1][1]
    s33 = self.Smat[2][2][2][2]
    s12 = self.Smat[0][0][1][1]
    s13 = self.Smat[0][0][2][2]
    s23 = self.Smat[1][1][2][2]
    return ct2 * (s13 + s23 + s33) + (cf2 * (s11 + s12 + s13) + (s12 + s22 + s23) * (1 - cf2)) * (1 - ct2)

  def shear(self, x):
    ct = math.cos(x[0])
    ct2 = ct*ct
    st2 = 1 - ct2
    cf = math.cos(x[1])
    sf = math.sin(x[1])
    sf2 = sf*sf
    cx = math.cos(x[2])
    cx2 = cx*cx
    sx = math.sin(x[2])
    sx2 = 1 - cx2
    s11 = self.Smat[0][0][0][0]
    s22 = self.Smat[1][1][1][1]
    s33 = self.Smat[2][2][2][2]
    s44 = 4 * self.Smat[1][2][1][2]
    s55 = 4 * self.Smat[0][2][0][2]
    s66 = 4 * self.Smat[0][1][0][1]
    s12 = self.Smat[0][0][1][1]
    s13 = self.Smat[0][0][2][2]
    s23 = self.Smat[1][1][2][2]
    r = (
	  ct2*ct2*cx2*s44*sf2 + cx2*s44*sf2*st2*st2 + 4*cf**3*ct*cx*(-2*s11 + 2*s12 + s66)*sf*st2*sx
	  + 2*cf*ct*cx*sf*(ct2*(s44 - s55) + (4*s13 - 4*s23 - s44 + s55 - 4*s12*sf2 + 4*s22*sf2 - 2*s66*sf2)*st2)*sx
	  + s66*sf2*sf2*st2*sx2 + cf**4*st2*(4*ct2*cx2*s11 + s66*sx2)
	  + ct2*(2*cx2*(2*s33 + sf2*(-4*s23 - s44 + 2*s22*sf2))*st2 + s55*sf2*sx2)
	  + cf**2*(ct2*ct2*cx2*s55 + ct2*(-2*cx2*(4*s13 + s55 - 2*(2*s12 + s66)*sf2)*st2 + s44*sx2)
                   + st2*(cx2*s55*st2 + 2*(2*s11 - 4*s12 + 2*s22 - s66)*sf2*sx2))
        )
    return 1/r

  def Poisson(self, x):
    ct = math.cos(x[0])
    ct2 = ct*ct
    st2 = 1 - ct2
    cf = math.cos(x[1])
    sf = math.sin(x[1])
    cx = math.cos(x[2])
    sx = math.sin(x[2])
    s11 = self.Smat[0][0][0][0]
    s22 = self.Smat[1][1][1][1]
    s33 = self.Smat[2][2][2][2]
    s44 = 4 * self.Smat[1][2][1][2]
    s55 = 4 * self.Smat[0][2][0][2]
    s66 = 4 * self.Smat[0][1][0][1]
    s12 = self.Smat[0][0][1][1]
    s13 = self.Smat[0][0][2][2]
    s23 = self.Smat[1][1][2][2]

    return (
  (-(ct**2*cx**2*s33*st2) - cf**2*cx**2*s13*st2*st2 - cx**2*s23*sf**2*st2*st2 + ct*cx*s44*sf*st2*(ct*cx*sf + cf*sx) - 
          ct**2*s23*(ct*cx*sf + cf*sx)**2 - cf**2*s12*st2*(ct*cx*sf + cf*sx)**2 - s22*sf**2*st2*(ct*cx*sf + cf*sx)**2 + 
          cf*ct*cx*s55*st2*(cf*ct*cx - sf*sx) - cf*s66*sf*st2*(ct*cx*sf + cf*sx)*(cf*ct*cx - sf*sx) - 
          ct**2*s13*(cf*ct*cx - sf*sx)**2 - cf**2*s11*st2*(cf*ct*cx - sf*sx)**2 - s12*sf**2*st2*(cf*ct*cx - sf*sx)**2)/
        (ct**4*s33 + 2*cf**2*ct**2*s13*st2 + cf**2*ct**2*s55*st2 + 2*ct**2*s23*sf**2*st2 + ct**2*s44*sf**2*st2 + 
          cf**4*s11*st2*st2 + 2*cf**2*s12*sf**2*st2*st2 + cf**2*s66*sf**2*st2*st2 + s22*sf**4*st2*st2)
    )


################################################################################################

if len(sys.argv)!=2:
  print "Usage:", sys.argv[0], "cij file"

cij=sys.argv[1]
tmp=cij.split(".")
tmp2=tmp[0]
tmp3=tmp2.split("/")
tmp4=tmp3[len(tmp3)-1]
res=tmp2+".res"
with open (cij,'r') as Cij_file :

	
	result=open(res,'w')
	# Explain our format
	result.write("#name Bulk(GPa) Young(GPa) Shear(GPa) Poisson minE(GPa) maxE(GPa) minLC(Tpa-1) maxLC(Tpa-1) minG(GPa) maxG(GPa) minNu maxNu \n")
        tensor=""
	for line in Cij_file:
		name=cij
		tensor=tensor+line
	# Print material name
	#result.write(('%s') %(cij.split("_")[0]))
        print tmp4.split("_")[0]
	result.write(tmp4.split("_")[0])
	
	# Using ELATE code
	elas=Elastic(tensor)
	if elas.isOrthorhombic():
		elas = ElasticOrtho(elas)
	# Compute and write average properties (Hill)
	avg = elas.averages()
	result.write(('%7.5g'+' %7.5g'+' %7.5g'+' %.5g ') %tuple(avg[2]))
	
	eigenval = sorted(la.eig(elas.CVoigt)[0])
	if eigenval[0] <= 1e-3:
		print 'Stiffness matrix is not definite positive, crystal is mechanically unstable for zeolite %s' %name 
		result.write('\n')
	
	# Compute and write min and max elastic constants
	if eigenval[0] > 0:
		minE = minimize(elas.Young, 2)
		maxE = maximize(elas.Young, 2)
		minLC = minimize(elas.LC, 2)
		maxLC = maximize(elas.LC, 2)
		minG = minimize(elas.shear, 3)
		maxG = maximize(elas.shear, 3)
		minNu = minimize(elas.Poisson, 3)
		maxNu = maximize(elas.Poisson, 3)
		result.write(('%8.5g'+' %8.5g'+' %8.5g'+' %8.5g'+' %8.5g'+' %8.5g'+' %.5g'+' %.5g \n') % (minE[1], maxE[1], 1000*minLC[1], 1000*maxLC[1], minG[1], maxG[1],minNu[1], maxNu[1]))
	
	result.close()
