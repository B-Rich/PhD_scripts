#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math, sys
import numpy as np
from matplotlib.colors import LogNorm
import matplotlib.pyplot as plt
from pylab import *
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import rc
from mpl_toolkits.mplot3d import Axes3D
rc('text', usetex=True)
import ReadWrite as rw

# Find out how many configurations are stored
nconf = rw.nconfFromDist(sys.argv[1]+".dist")
print "#### Simulation", sys.argv[1].split("/")[-1], "####"
print "Reading ", nconf, "configurations"

# Read the distances in
trajDist = rw.readFromDistanceFile(sys.argv[1] + ".dist", nconf)

# Read the correspondence between pairs and atoms in Pairs.dat
pairs = {} # dict with [Atom1(N), Atom2(Zn)] at key pair 1-2
nitropairs = {} # dict with [[First Pair number, Atom2(Zn)], [Second Pair number, Atom2(Zn)], [...], [Last Pair number, Atom2(Zn)]] at key Atom1(N)
tmp = 0
with open(sys.argv[2],"r") as pfile:
  next(pfile)
  for line in pfile:
    sp = line.split()
    pairs[int(sp[2])-1] = [int(sp[0]),int(sp[1])]
    if (int(sp[1]) not in nitropairs):
      if (len(nitropairs) == 0): origin = int(sp[1])
      nitropairs[int(sp[1])] = [[int(sp[2])-1,int(sp[0])]]
    elif (int(sp[1]) in nitropairs):
      nitropairs[int(sp[1])].append([int(sp[2])-1,int(sp[0])])
    tmp = int(sp[1])

npairs = len(trajDist)

Nitro = {}
Zinc = {}

c1 = 0
c2 = 0
for i in range(len(pairs)):
  if (pairs[i][0] not in Nitro):
    Nitro[pairs[i][0]] = c1
    c1 = c1 + 1

for i in range(len(pairs)):
  if (pairs[i][1] not in Zinc):
    Zinc[pairs[i][1]] = c2
    c2 = c2 + 1

rnitropairs=range(len(nitropairs[origin]))

distances = [0.0 for j in rnitropairs]
distances40 = [0.0 for j in rnitropairs]
coord_index = -10
second_index = -10
tmp1 = 200
tmp2 = 200
nitro_active={}
Cnumbers={}
cutoff = 3.7
for key in nitropairs:
  Cnumbers[key] = [0.0 for x in range(nconf)]
  i = key
  coord_index = -10
  second_index = -10
  third_index = -10
  fourth_index = -10
  tmp1 = 2000
  tmp2 = 2000
  tmp3 = 2000
  tmp4 = 2000
  tmplist = [tmp1,tmp2,tmp3,tmp4]
  for time in range(0,nconf/25):
    for n in rnitropairs:
      d = trajDist[nitropairs[i][n][0]][time]
      distances[n] = d
    sortdist = sorted(distances)
    if (sortdist[4]<=cutoff):
      Cnumbers[i][time]=5.0
    elif (sortdist[4]>cutoff and sortdist[3]<=cutoff):
      Cnumbers[i][time]=4.0
    elif (sortdist[3]>cutoff and sortdist[2]<=cutoff):
      Cnumbers[i][time]=3.0
    elif (sortdist[2]>cutoff and sortdist[1]<=cutoff):
      Cnumbers[i][time]=2.0
    elif (sortdist[1]>cutoff and sortdist[0]<=cutoff):
      Cnumbers[i][time]=1.0
    elif (sortdist[0]>cutoff):
      Cnumbers[i][time]=0.0
  for time in range(1+23*nconf/25,nconf):
    for n in rnitropairs:
      d = trajDist[nitropairs[i][n][0]][time]
      distances[n] = d
    sortdist = sorted(distances)
    if (sortdist[4]<=cutoff):
      Cnumbers[i][time]=5.0
    elif (sortdist[4]>cutoff and sortdist[3]<=cutoff):
      Cnumbers[i][time]=4.0
    elif (sortdist[3]>cutoff and sortdist[2]<=cutoff):
      Cnumbers[i][time]=3.0
    elif (sortdist[2]>cutoff and sortdist[1]<=cutoff):
      Cnumbers[i][time]=2.0
    elif (sortdist[1]>cutoff and sortdist[0]<=cutoff):
      Cnumbers[i][time]=1.0
    elif (sortdist[0]>cutoff):
      Cnumbers[i][time]=0.0
  for time in range(nconf/25,1+23*nconf/25):
    for n in rnitropairs:
      d = trajDist[nitropairs[i][n][0]][time]
      distances[n] = d
      d40 = trajDist[nitropairs[i][n][0]][time+50]
      distances40[n] = d40
    sortdist = sorted(distances)
    if (sortdist[4]<=cutoff):
      Cnumbers[i][time]=5.0
    elif (sortdist[4]>cutoff and sortdist[3]<=cutoff):
      Cnumbers[i][time]=4.0
    elif (sortdist[3]>cutoff and sortdist[2]<=cutoff):
      Cnumbers[i][time]=3.0
    elif (sortdist[2]>cutoff and sortdist[1]<=cutoff):
      Cnumbers[i][time]=2.0
    elif (sortdist[1]>cutoff and sortdist[0]<=cutoff):
      Cnumbers[i][time]=1.0
    elif (sortdist[0]>cutoff):
      Cnumbers[i][time]=0.0
    if (sortdist[0]<=cutoff and distances40[distances.index(sortdist[0])]<=cutoff):
      if (coord_index == -10):
        coord_index = distances.index(sortdist[0])
        second_index = distances.index(sortdist[1])
        third_index = distances.index(sortdist[2])
        fourth_index = distances.index(sortdist[3])
        nitro_active[i] = [[coord_index, time, nitropairs[i][coord_index][0]]]
      elif ((distances.index(sortdist[0]) not in tmplist) or (distances.index(sortdist[1]) not in tmplist) or (distances.index(sortdist[2]) not in tmplist) or (distances.index(sortdist[3]) not in tmplist)):
        coord_index = distances.index(sortdist[0])
        if (sortdist[1]<=cutoff and distances40[distances.index(sortdist[1])]<=cutoff):
          second_index = distances.index(sortdist[1])
          if (sortdist[2]<=cutoff and distances40[distances.index(sortdist[2])]<=cutoff):
            third_index = distances.index(sortdist[2])
            if (sortdist[3]<=cutoff and distances40[distances.index(sortdist[3])]<=cutoff):
              fourth_index = distances.index(sortdist[3])
            else:
              fourth_index = third_index
          else:
            third_index = second_index
            fourth_index = second_index
        else:
          second_index = coord_index
          third_index = coord_index
          fourth_index = coord_index
        indexlist = [nitro_active[i][-1][0]]
        if (len(nitro_active[i])>1): indexlist.append(nitro_active[i][-2][0])
        if (len(nitro_active[i])>2): indexlist.append(nitro_active[i][-3][0])
        if (len(nitro_active[i])>3): indexlist.append(nitro_active[i][-4][0])
        timelist = nitro_active[i][-1][1]
        if (coord_index not in indexlist and time>timelist+40):
          nitro_active[i].append([coord_index, time, nitropairs[i][coord_index][0]])
        elif (coord_index in indexlist and second_index not in indexlist and time>timelist+40):
          nitro_active[i].append([second_index, time, nitropairs[i][second_index][0]])
        elif (coord_index in indexlist and second_index in indexlist and third_index not in indexlist and time>timelist+40):
          nitro_active[i].append([third_index, time, nitropairs[i][third_index][0]])
        elif (coord_index in indexlist and second_index in indexlist and third_index in indexlist and fourth_index not in indexlist and time>timelist+40):
          nitro_active[i].append([fourth_index, time, nitropairs[i][fourth_index][0]])
      tmp1 = coord_index
      tmp2 = second_index
      tmp3 = third_index
      tmp4 = fourth_index
      tmplist = [tmp1,tmp2,tmp3,tmp4]
  if (i not in nitro_active):
    nitro_active[i] = [[]]

Cnumber = [0.0 for i in range(nconf)]
for i in nitropairs:
  for t in range(nconf):
    Cnumber[t]=Cnumber[t]+Cnumbers[i][t]/len(nitropairs)
with open(sys.argv[1]+".CN","w") as fout:
  for k in range(nconf):
    fout.write(str(k*5)+" "+str(Cnumber[k])+" "+str(Cnumbers[i][k])+"\n")

pairs_numb = 0
pairs_numb2 = 0
for i in nitropairs:
  if (len(nitro_active[i])>1):
    pairs_numb = pairs_numb + len(nitro_active[i])-1
    pairs_numb2 = pairs_numb2 + len(nitro_active[i])-1
  elif (len(nitro_active[i])<=1):
    pairs_numb = pairs_numb + len(nitro_active[i])

uglob = 0
mindelay = 1e15
maxdelay = 0.0
d1 = [[0.0 for x in range(2*nconf)] for y in range(pairs_numb2)]
d2 = [[0.0 for x in range(2*nconf)] for y in range(pairs_numb2)]
Cn = [[0.0 for x in range(2*nconf)] for y in range(pairs_numb2)]
offset=50
for i in nitropairs:
#  print "Zinc number", i
  nuldelay = 0
  u = 0
  offset=50
  if (len(nitro_active[i]) >= 2):
    mindelays = list()
    delays = [int(0) for p in range(len(nitro_active[i])-1)]
    l = 0
    while(l<len(delays)):
      diff = 100
      n = [nitro_active[i][u+p][0] for p in range(len(nitro_active[i]))]
      times = [nitro_active[i][u+p][1] for p in range(len(nitro_active[i]))]
      for k in range(times[l],times[l+1]):
        d = [trajDist[nitropairs[i][z][0]][k] for z in n]
        dm100 = [trajDist[nitropairs[i][z][0]][k-offset] for z in n]
        if (k+offset<nconf): d100 = [trajDist[nitropairs[i][z][0]][k+offset] for z in n]
        if (k+offset>=nconf): d100 = [trajDist[nitropairs[i][z][0]][nconf-1] for z in n]
        dm = [[trajDist[nitropairs[i][z][0]][x] for x in range(k-offset-10,k-offset)] for z in n]
        if (k+offset+10<nconf): dp = [[trajDist[nitropairs[i][z][0]][x] for x in range(k+offset,k+offset+10)] for z in n]
        if (k+offset+10>=nconf): dp = [[trajDist[nitropairs[i][z][0]][x] for x in range(nconf-10,nconf)] for z in n]
        if (abs(d[l]-d[l+1])<=diff and d100[l]>=d100[l+1] and dm100[l]<=dm100[l+1]): #and min(dm[l+1])>3.1 and max(dm[l])<2.9 and max(dp[l+1])<2.9 and min(dp[l])>3.1):
          diff = abs(d[l]-d[l+1])
          delays[l] = int(k)
      if delays[l]==0:
        nuldelay = nuldelay+1
        #delays[l] = times[l+1]-(nconf/50)
        #if (delays[l]<(nconf/10)): delays[l]=nconf/50
        delays.remove(delays[l])
        times.remove(times[l+1])
        nitro_active[i].remove(nitro_active[i][l+1])
        if (offset<80): offset = offset + 10
        l = l - 1
        #print nuldelay, delays, nitro_active[i]
      l = l + 1
    for l in range(len(delays)):
      for k in range(nconf-delays[l],2*nconf-delays[l]):
        k2 = k + delays[l] - nconf
        d = [trajDist[nitropairs[i][z][0]][k2] for z in n]
        d1[uglob+l][k] = d[l]
        d2[uglob+l][k] = d[l+1]
        Cn[uglob+l][k] = Cnumbers[i][k2]
    if (len(delays)>0):
      if(min(delays)<mindelay): mindelay = min(delays)
      if(max(delays)>maxdelay): maxdelay = max(delays)
    uglob = uglob + len(delays)

offset=50
#print nitro_active
print "Number of exchange trajectories averaged:", uglob
print "Maximum time before t0", mindelay*5, "fs"
print "Maximum time after t0", (nconf-maxdelay)*5, "fs"
ndist = uglob
d1_tot = [0.0 for x in range(mindelay+nconf-maxdelay)]
sigma1 = [0.0 for x in range(mindelay+nconf-maxdelay)]
median1 = [0.0 for x in range(mindelay+nconf-maxdelay)]
d2_tot = [0.0 for x in range(mindelay+nconf-maxdelay)]
sigma2 = [0.0 for x in range(mindelay+nconf-maxdelay)]
median2 = [0.0 for x in range(mindelay+nconf-maxdelay)]
Cn_tot = [0.0 for x in range(mindelay+nconf-maxdelay)]
Cn_med = [0.0 for x in range(mindelay+nconf-maxdelay)]
#resfile = open("foo.res","w")
#with open("foo.out","w") as outfile:
for k in range(nconf-mindelay,2*nconf-maxdelay):
#    outfile.write(str(k-nconf)+" "+str(d1[0][k])+" "+str(d2[0][k])+" "+str(d1[1][k])+" "+str(d2[1][k])+" "+str(d1[2][k])+" "+str(d2[2][k])+" "+str(d1[3][k])+" "+str(d2[3][k])+"\n")
  k2 = k - nconf + mindelay
  for d in range(ndist):
    d1_tot[k2] = d1_tot[k2] + d1[d][k]/ndist
    d2_tot[k2] = d2_tot[k2] + d2[d][k]/ndist
    Cn_tot[k2] = Cn_tot[k2] + Cn[d][k]/ndist
  for d in range(ndist):
    sigma1[k2] = sigma1[k2] + ((d1[d][k]-d1_tot[k2])**2)/(ndist-1)
    sigma2[k2] = sigma2[k2] + ((d2[d][k]-d2_tot[k2])**2)/(ndist-1)
  sigma1[k2] = math.sqrt(sigma1[k2])
  sigma2[k2] = math.sqrt(sigma2[k2])
  dist1 = sorted([d1[d][k] for d in range(ndist)])
  dist2 = sorted([d2[d][k] for d in range(ndist)])
  SCn = sorted([Cn[d][k] for d in range(ndist)])
  if (ndist%2==0):
    median1[k2] = float((dist1[ndist/2]+dist1[2+ndist/2])/2)
    median2[k2] = float((dist2[ndist/2]+dist2[2+ndist/2])/2)
    Cn_med[k2] = float((SCn[ndist/2]+SCn[2+ndist/2])/2)
  elif ((ndist+1)%2==0):
    median1[k2] = float(dist1[1+ndist/2])
    median2[k2] = float(dist2[1+ndist/2])
    Cn_med[k2] = float(SCn[1+ndist/2])
#    resfile.write(str(float((k-nconf)*5)/1000.0)+" "+str(Cn_tot[k2])+" "+str(d1_tot[k2])+" "+str(d2_tot[k2])+" "+str(d1_tot[k2]-sigma1[k2])+" "+str(d2_tot[k2]-sigma2[k2])+" "+str(d1_tot[k2]+sigma1[k2])+" "+str(d2_tot[k2]+sigma2[k2])+"\n")

#resfile.close()

with open(sys.argv[1]+".avgtraj","w") as fout:
  for k in range(nconf-mindelay,2*nconf-maxdelay):
    k2 = k - nconf + mindelay
    fout.write(str((k-nconf)*5)+" "+str(d1_tot[k2])+" "+str(d2_tot[k2])+" "+str(median1[k2])+" "+str(median2[k2])+" "+str(sigma1[k2])+" "+str(sigma2[k2])+"\n")
with open(sys.argv[1]+".CNtraj","w") as fout:
  for k in range(nconf-mindelay,2*nconf-maxdelay):
    k2 = k - nconf + mindelay
    fout.write(str((k-nconf)*5)+" "+str(Cn_tot[k2])+" "+str(Cn_med[k2])+"\n")

d1_all = []
d2_all = []
Cn_all = []
time = []
for d in range(ndist):
  for k in range(nconf-mindelay,2*nconf-maxdelay):
    k2 = k - nconf + mindelay
    d1_all.append(d1[d][k])
    Cn_all.append(Cn[d][k])
    d2_all.append(d2[d][k])
    time.append((k-nconf)*5)


count=0
with open((sys.argv[1].split("/"))[-1]+".alldist","w") as fout:
  for d in range(ndist):
    for k in range(nconf-mindelay,2*nconf-maxdelay):
      fout.write(str(time[count])+" "+str(d1_all[count])+" "+str(d2_all[count])+"\n")
      count=count+1


# plot and fit
###############################################
fig=plt.figure(1)
ax = fig.add_subplot(111)
fig.suptitle('Average exchange trajectories')
ax.set_xlabel('Time (fs)')
ax.set_ylabel('Distance ($\mathring{A}$)')
my_cmap=matplotlib.cm.get_cmap('cool')

#nbins = sqrt(float(len(d1_all)))/5
nbins = 200
#plt.hist2d(time, d1_all, bins=[(float(mindelay+nconf-maxdelay))/4,nbins], range=[[min(time),max(time)],[min(d1_all),7]], cmap=my_cmap, cmin=4)
ax.hist2d(time, d1_all, bins=[100,nbins], range=[[-1000,1000],[1.3,6]], cmap=my_cmap, cmin=float(ndist)/10.0)
my_cmap2=matplotlib.cm.get_cmap('hot')
#plt.hist2d(time, d2_all, bins=[(float(mindelay+nconf-maxdelay))/4,nbins], range=[[min(time),max(time)],[min(d2_all),7]], cmap=my_cmap, cmin=4)
ax.hist2d(time, d2_all, bins=[100,nbins], range=[[-1000,1000],[1.3,6]], cmap=my_cmap2, cmin=float(ndist)/10.0)

ax.plot([time[i] for i in range(mindelay+nconf-maxdelay)],d1_tot,label="Average bond cleavage trajectory",linewidth=3.0,color='b')
ax.plot([time[i] for i in range(mindelay+nconf-maxdelay)],median1,label="Median bond cleavage trajectory",linewidth=3.0,color='DarkBlue')
ax.plot([time[i] for i in range(mindelay+nconf-maxdelay)],d2_tot,label="Average bond formation trajectory",linewidth=3.0,color='r')
ax.plot([time[i] for i in range(mindelay+nconf-maxdelay)],median2,label="Median bond formation trajectory",linewidth=3.0,color='brown')
#ax.plot([time[i] for i in range(mindelay+nconf-maxdelay)],[Cn_tot[i]-1e5 for i in range(len(Cn_tot))],label="Average coordination number",linewidth=2.0,color='g')
#ax.plot([time[i] for i in range(mindelay+nconf-maxdelay)],[Cn_med[i]-1e5 for i in range(len(Cn_med))],label="Average coordination number",linewidth=2.0,color='DarkGreen')

ax2 = ax.twinx()
ax2.plot([time[i] for i in range(mindelay+nconf-maxdelay)],Cn_tot,label="Average coordination number",linewidth=2.0,color='g')
#ax2.plot([time[i] for i in range(mindelay+nconf-maxdelay)],Cn_med,label="Median coordination number",linewidth=2.0,color='DarkGreen')
ax2.set_ylabel('Coordination number')
ax2.set_xlim(-1000,1000)
ax2.set_ylim(2,4)
ax.set_xlim(-1000,1000)

#plt.legend(bbox_to_anchor=(0.90, 0.6), bbox_transform=plt.gcf().transFigure, fontsize=10)
ax.legend(loc=1, bbox_transform=plt.gcf().transFigure, fontsize=7)
ax2.legend(loc=2, bbox_transform=plt.gcf().transFigure, fontsize=7)
#plt.colorbar()
plt.savefig((sys.argv[1].split("/"))[-1]+'_dist2.png', dpi=600)
################################################
exit(0)

# plot and fit
###############################################
fig=plt.figure(2)
ax = fig.add_subplot(111,projection='3d')
fig.suptitle('Average coordination number during exchange')
ax.set_xlabel('Time (fs)')
ax.set_ylabel('Coordination number')
#my_cmap=matplotlib.cm.get_cmap('cool')

#ax.xaxis.set_major_formatter(FormatStrFormatter('%d'))

#nbins = sqrt(float(len(d1_all)))/5
nbins = 6
nbins2 = 100
tmax=1000
H,xedges,yedges=np.histogram2d(time, Cn_all, bins=[nbins2,nbins], range=[[-tmax,tmax],[0,6]])
hist=np.array(list(H))
xe=np.array(list(xedges))
ye=np.array(list(yedges))

x = np.array([(xe[i]+xe[i+1])/2.0 for i in range(len(xe)-1)])
ax.set_xticks(np.arange(int(xe[0]),int(xe[-1]+200),200))

#for j in range(nbins):
  #y = np.array([yedges[j] for m in range(len(x))])
  #z = np.array([row[j] for row in np.array(list(H))])
  #print y
  #ax.plot(y,x,z)

zmax=40
for j,c,a in zip(range(nbins),['y','m','c','b','g','r'],[0.5,0.3,0.2,0.2,0.2,1]):
  z = int(ye[j])
  y2 = np.array([row[j] for row in hist])
  y = savgol_filter(y2,5,1)
  cs = c*len(x)
  if (j==0):
    zmax=max(y)
  elif(j>0 and max(y)>zmax):
    zmax=max(y)
  ax.bar(x,y,zs=z,width=int(2.0*tmax/len(x)),zdir='y',color=cs,edgecolor=cs,alpha=a,label=str(z)+" N coordinated")

ax.view_init(elev=16, azim=-63)             # camera elevation and angle
ax.dist=8
ax.set_zlim(1,zmax)
time2=list()
Cn_tot2=list()
Cn_med2=list()
for i in range(mindelay+nconf-maxdelay):
  if (time[i]>=-1000 and time[i]<=1000):
    time2.append(time[i])
    Cn_tot2.append(Cn_tot[i])
    Cn_med2.append(Cn_med[i])
plt.plot(time2,Cn_tot2,label="Average",linewidth=2.0)
plt.plot(time2,Cn_med2,label="Median",linewidth=2.0)
ax.set_xlim(-1000,1000)

#plt.legend(bbox_to_anchor=(0.90, 0.6), bbox_transform=plt.gcf().transFigure, fontsize=10)
#plt.colorbar()
#plt.show()
plt.savefig((sys.argv[1].split("/"))[-1]+'_CN.png', dpi=600)
###############################################



print "############################################################\n\n"
