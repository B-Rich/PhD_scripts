#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math, sys
import numpy as np
from matplotlib.colors import LogNorm
import matplotlib.pyplot as plt
from pylab import *
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import rc
rc('text', usetex=True)
import PBC_RG as pbc
import ReadWrite as rw

# Find out how many configurations are stored
nconf = rw.nconfFromDist(sys.argv[1]+".dist")
print "#### Simulation", sys.argv[1].split("/")[-1], "####"
print "Reading ", nconf, "configurations"

# Read the cell parameters in
cell_f = sys.argv[3]
[Cell, Cell.C] = rw.readCell(cell_f)

# Read the distances and the positions in
trajDist = rw.readFromDistanceFile(sys.argv[1] + ".dist", nconf)
trajPos = rw.readFromXYZFile(sys.argv[1] + "_10.xyz",1,1)

# Read the correspondence between pairs and atoms in Pairs.dat
pairs = {} # dict with [Atom1(N), Atom2(Zn)] at key pair 1-2
nitropairs = {} # dict with [[First Pair number, Atom2(Zn)], [Second Pair number, Atom2(Zn)], [...], [Last Pair number, Atom2(Zn)]] at key Atom1(N)
tmp = 0
with open(sys.argv[2],"r") as pfile:
  next(pfile)
  for line in pfile:
    sp = line.split()
    pairs[int(sp[2])-1] = [int(sp[0]),int(sp[1])]
    if (int(sp[1]) not in nitropairs):
      if (len(nitropairs) == 0): origin = int(sp[1])
      nitropairs[int(sp[1])] = [[int(sp[2])-1,int(sp[0])]]
    elif (int(sp[1]) in nitropairs):
      nitropairs[int(sp[1])].append([int(sp[2])-1,int(sp[0])])
    tmp = int(sp[1])

npairs = len(trajDist)

Nitro = {}
Zinc = {}

c1 = 0
c2 = 0
for i in range(len(pairs)):
  if (pairs[i][0] not in Nitro):
    Nitro[pairs[i][0]] = c1
    c1 = c1 + 1

for i in range(len(pairs)):
  if (pairs[i][1] not in Zinc):
    Zinc[pairs[i][1]] = c2
    c2 = c2 + 1

rnitropairs=range(len(nitropairs[origin]))

distances = [0.0 for j in rnitropairs]
pos2 = [[0,0,0] for j in rnitropairs]
distances40 = [0.0 for j in rnitropairs]
coord_index = -10
second_index = -10
tmp1 = 200
tmp2 = 200
nitro_active={}
Tangles = {}
for key in nitropairs:
  Tangles[key] = [0.0 for x in range(nconf)]
  i = key
  coord_index = -10
  second_index = -10
  third_index = -10
  fourth_index = -10
  tmp1 = 2000
  tmp2 = 2000
  tmp3 = 2000
  tmp4 = 2000
  tmplist = [tmp1,tmp2,tmp3,tmp4]
  for time in range(0,nconf):
    atom1 = trajPos[time][key]
    pos1 = pbc.get_coord(atom1)
    for n in rnitropairs:
      atom2 = trajPos[time][nitropairs[i][n][1]]
      pos2[n] = pbc.get_coord(atom2)
      d = trajDist[nitropairs[i][n][0]][time]
      distances[n] = d
      if (time<nconf-40):
        d40 = trajDist[nitropairs[i][n][0]][time+40]
        distances40[n] = d40
    sortdist = sorted(distances)
    i1 = distances.index(sortdist[0])
    i2 = distances.index(sortdist[1])
    i3 = distances.index(sortdist[2])
    i4 = distances.index(sortdist[3])
    v1 = pbc.ClosestImage(pos1,pos2[i1],Cell)
    v2 = pbc.ClosestImage(pos1,pos2[i2],Cell)
    v3 = pbc.ClosestImage(pos1,pos2[i3],Cell)
    v4 = pbc.ClosestImage(pos1,pos2[i4],Cell)
    vi1 = [v1[h]-pos1[h] for h in range(3)]
    vi2 = [v2[h]-pos1[h] for h in range(3)]
    vi3 = [v3[h]-pos1[h] for h in range(3)]
    vi4 = [v4[h]-pos1[h] for h in range(3)]
    T12 = math.acos(np.dot(vi1,vi2)/(math.sqrt(np.dot(vi1,vi1))*math.sqrt(np.dot(vi2,vi2))))*180.0/np.pi
    T13 = math.acos(np.dot(vi1,vi3)/(math.sqrt(np.dot(vi1,vi1))*math.sqrt(np.dot(vi3,vi3))))*180.0/np.pi
    T14 = math.acos(np.dot(vi1,vi4)/(math.sqrt(np.dot(vi1,vi1))*math.sqrt(np.dot(vi4,vi4))))*180.0/np.pi
    T24 = math.acos(np.dot(vi2,vi4)/(math.sqrt(np.dot(vi2,vi2))*math.sqrt(np.dot(vi4,vi4))))*180.0/np.pi
    T23 = math.acos(np.dot(vi2,vi3)/(math.sqrt(np.dot(vi2,vi2))*math.sqrt(np.dot(vi3,vi3))))*180.0/np.pi
    T34 = math.acos(np.dot(vi4,vi3)/(math.sqrt(np.dot(vi4,vi4))*math.sqrt(np.dot(vi3,vi3))))*180.0/np.pi
    Tangles[i][time] = (T12+T13+T14+T23+T24+T34)/6
    if (Tangles[i][time]==0):
        print T12, T13, T14, T24, T23, T34
        exit(1)
    if (time>200 and time<nconf-200):
      if (sortdist[0]<=2.5 and distances40[distances.index(sortdist[0])]<=2.5):
        if (coord_index == -10):
          coord_index = distances.index(sortdist[0])
          second_index = distances.index(sortdist[1])
          third_index = distances.index(sortdist[2])
          fourth_index = distances.index(sortdist[3])
          nitro_active[i] = [[coord_index, time, nitropairs[i][coord_index][0]]]
        elif ((distances.index(sortdist[0]) not in tmplist) or (distances.index(sortdist[1]) not in tmplist) or (distances.index(sortdist[2]) not in tmplist) or (distances.index(sortdist[3]) not in tmplist)):
          coord_index = distances.index(sortdist[0])
          if (sortdist[1]<=2.5 and distances40[distances.index(sortdist[1])]<=2.5):
            second_index = distances.index(sortdist[1])
            if (sortdist[2]<=2.5 and distances40[distances.index(sortdist[2])]<=2.5):
              third_index = distances.index(sortdist[2])
              if (sortdist[3]<=2.5 and distances40[distances.index(sortdist[3])]<=2.5):
                fourth_index = distances.index(sortdist[3])
              else:
                fourth_index = third_index
            else:
              third_index = second_index
              fourth_index = second_index
          else:
            second_index = coord_index
            third_index = coord_index
            fourth_index = coord_index
          indexlist = [nitro_active[i][-1][0]]
          if (len(nitro_active[i])>1): indexlist.append(nitro_active[i][-2][0])
          if (len(nitro_active[i])>2): indexlist.append(nitro_active[i][-3][0])
          if (len(nitro_active[i])>3): indexlist.append(nitro_active[i][-4][0])
          timelist = nitro_active[i][-1][1]
          if (coord_index not in indexlist and time>timelist+40):
            nitro_active[i].append([coord_index, time, nitropairs[i][coord_index][0]])
          elif (coord_index in indexlist and second_index not in indexlist and time>timelist+40):
            nitro_active[i].append([second_index, time, nitropairs[i][second_index][0]])
          elif (coord_index in indexlist and second_index in indexlist and third_index not in indexlist and time>timelist+40):
            nitro_active[i].append([third_index, time, nitropairs[i][third_index][0]])
          elif (coord_index in indexlist and second_index in indexlist and third_index in indexlist and fourth_index not in indexlist and time>timelist+40):
            nitro_active[i].append([fourth_index, time, nitropairs[i][fourth_index][0]])
        tmp1 = coord_index
        tmp2 = second_index
        tmp3 = third_index
        tmp4 = fourth_index
        tmplist = [tmp1,tmp2,tmp3,tmp4]
    if (i not in nitro_active):
      nitro_active[i] = [[]]

pairs_numb = 0
pairs_numb2 = 0
for i in nitropairs:
  if (len(nitro_active[i])>1):
    pairs_numb = pairs_numb + len(nitro_active[i])-1
    pairs_numb2 = pairs_numb2 + len(nitro_active[i])-1
  elif (len(nitro_active[i])<=1):
    pairs_numb = pairs_numb + len(nitro_active[i])

uglob = 0
mindelay = 1e15
maxdelay = 0.0
d1 = [[0.0 for x in range(2*nconf)] for y in range(pairs_numb2)]
d2 = [[0.0 for x in range(2*nconf)] for y in range(pairs_numb2)]
T1 = [[0.0 for x in range(2*nconf)] for y in range(pairs_numb2)]
offset=50
for i in nitropairs:
  print "Zinc number", i
  nuldelay = 0
  u = 0
  offset=50
  if (len(nitro_active[i]) >= 2):
    mindelays = list()
    delays = [int(0) for p in range(len(nitro_active[i])-1)]
    l = 0
    while(l<len(delays)):
      diff = 100
      n = [nitro_active[i][u+p][0] for p in range(len(nitro_active[i]))]
      times = [nitro_active[i][u+p][1] for p in range(len(nitro_active[i]))]
      for k in range(times[l],times[l+1]):
        d = [trajDist[nitropairs[i][z][0]][k] for z in n]
        dm100 = [trajDist[nitropairs[i][z][0]][k-offset] for z in n]
        if (k+offset<nconf): d100 = [trajDist[nitropairs[i][z][0]][k+offset] for z in n]
        if (k+offset>=nconf): d100 = [trajDist[nitropairs[i][z][0]][nconf-1] for z in n]
        dm = [[trajDist[nitropairs[i][z][0]][x] for x in range(k-offset-10,k-offset)] for z in n]
        if (k+offset+10<nconf): dp = [[trajDist[nitropairs[i][z][0]][x] for x in range(k+offset,k+offset+10)] for z in n]
        if (k+offset+10>=nconf): dp = [[trajDist[nitropairs[i][z][0]][x] for x in range(nconf-10,nconf)] for z in n]
        if (abs(d[l]-d[l+1])<=diff and d100[l]>=d100[l+1] and dm100[l]<=dm100[l+1] and min(dm[l+1])>3.1 and max(dm[l])<2.9 and max(dp[l+1])<2.9 and min(dp[l])>3.1):
          diff = abs(d[l]-d[l+1])
          delays[l] = int(k)
      if delays[l]==0:
        nuldelay = nuldelay+1
        #delays[l] = times[l+1]-(nconf/50)
        #if (delays[l]<(nconf/10)): delays[l]=nconf/50
        delays.remove(delays[l])
        times.remove(times[l+1])
        nitro_active[i].remove(nitro_active[i][l+1])
        if (offset<80): offset = offset + 10
        l = l - 1
        #print nuldelay, delays, nitro_active[i]
      l = l + 1
    for l in range(len(delays)):
      for k in range(nconf-delays[l]+40,2*nconf-delays[l]-40):
        k2 = k + delays[l] - nconf
        d = [trajDist[nitropairs[i][z][0]][k2] for z in n]
        T = Tangles[i][k2]
        if (T==0):
          print T, k2, nconf-40, 40, k
          exit(1)
        d1[uglob+l][k] = d[l]
        d2[uglob+l][k] = d[l+1]
        T1[uglob+l][k] = T
    if (len(delays)>0):
      if(min(delays)<mindelay): mindelay = min(delays)
      if(max(delays)>maxdelay): maxdelay = max(delays)
    uglob = uglob + len(delays)

offset=50
print "Number of exchange trajectories averaged:", uglob
print "Maximum time before t0", mindelay*5, "fs"
print "Maximum time after t0", (nconf-maxdelay)*5, "fs"
ndist = uglob
d1_tot = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
sigma1 = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
median1 = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
d2_tot = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
sigma2 = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
median2 = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
T1_tot = [0.0 for x in range(mindelay+nconf-maxdelay-80)]
T1_med = [0.0 for x in range(mindelay+nconf-maxdelay-80)]

for k in range(nconf-mindelay+40,2*nconf-maxdelay-40):
  k2 = k - nconf + mindelay-40
  for d in range(ndist):
    d1_tot[k2] = d1_tot[k2] + d1[d][k]/ndist
    d2_tot[k2] = d2_tot[k2] + d2[d][k]/ndist
    T1_tot[k2] = T1_tot[k2] + T1[d][k]/ndist
  for d in range(ndist):
    sigma1[k2] = sigma1[k2] + ((d1[d][k]-d1_tot[k2])**2)/(ndist-1)
    sigma2[k2] = sigma2[k2] + ((d2[d][k]-d2_tot[k2])**2)/(ndist-1)
  sigma1[k2] = math.sqrt(sigma1[k2])
  sigma2[k2] = math.sqrt(sigma2[k2])
  dist1 = sorted([d1[d][k] for d in range(ndist)])
  dist2 = sorted([d2[d][k] for d in range(ndist)])
  Ta1 = sorted([T1[d][k] for d in range(ndist)])
  if (ndist%2==0):
    median1[k2] = float((dist1[ndist/2]+dist1[2+ndist/2])/2)
    median2[k2] = float((dist2[ndist/2]+dist2[2+ndist/2])/2)
    T1_med[k2] = float((Ta1[ndist/2]+Ta1[2+ndist/2])/2)
  elif ((ndist+1)%2==0):
    median1[k2] = float(dist1[1+ndist/2])
    median2[k2] = float(dist2[1+ndist/2])
    T1_med[k2] = float(Ta1[1+ndist/2])

#with open(sys.argv[1]+".avgtraj","w") as fout:
with open("test.avgtraj","w") as fout:
  for k in range(nconf-mindelay+40,2*nconf-maxdelay-40):
    k2 = k - nconf + mindelay-40
    fout.write(str((k-nconf)*5)+" "+str(d1_tot[k2])+" "+str(d2_tot[k2])+" "+str(median1[k2])+" "+str(median2[k2])+" "+str(d1_tot[k2]-sigma1[k2])+" "+str(d2_tot[k2]-sigma2[k2])+" "+str(d1_tot[k2]+sigma1[k2])+" "+str(d2_tot[k2]+sigma2[k2])+"\n")

#with open(sys.argv[1]+".angtraj","w") as fout:
with open("test.angtraj","w") as fout:
  for k in range(nconf-mindelay+40,2*nconf-maxdelay-40):
    k2 = k - nconf + mindelay-40
    fout.write(str((k-nconf)*5)+" "+str(T1_tot[k2])+" "+str(T1_med[k2])+"\n")


T1_all = []
time = []
for d in range(ndist):
  for k in range(nconf-mindelay+40,2*nconf-maxdelay-40):
    T1_all.append(T1[d][k])
    time.append((k-nconf)*5)

# plot and fit
###############################################
fig=plt.figure(1)
ax = fig.add_subplot(111)
fig.suptitle('Average exchange trajectories')
ax.set_xlabel('Time (fs)')
ax.set_ylabel('Angle ($^{\circ}$)')
my_cmap=matplotlib.cm.get_cmap('cool')

#nbins = sqrt(float(len(d1_all)))/5
nbins = 100
#plt.hist2d(time, d1_all, bins=[(float(mindelay+nconf-maxdelay))/4,nbins], range=[[min(time),max(time)],[min(d1_all),7]], cmap=my_cmap, cmin=4)
plt.hist2d(time, T1_all, bins=[100,nbins], range=[[-1000,1000],[95,115]], cmap=my_cmap, cmin=float(ndist)/20.0)

plt.plot([time[i] for i in range(mindelay+nconf-maxdelay-80)],T1_tot,label="Average tetrahedral angle",linewidth=3.0)
plt.plot([time[i] for i in range(mindelay+nconf-maxdelay-80)],T1_med,label="Median tetrahedral angle",linewidth=3.0)

#plt.legend(bbox_to_anchor=(0.90, 0.6), bbox_transform=plt.gcf().transFigure, fontsize=10)
plt.legend(loc=0, bbox_transform=plt.gcf().transFigure, fontsize=10)
#plt.colorbar()
plt.savefig((sys.argv[1].split("/"))[-1]+'_Tang_test.png', dpi=600)
###############################################


print "############################################################\n\n"
